name: Release Charts

on:
  push:
    tags:
    - v*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  HELM_REPO: https://rabbitlhf.github.io/helm-charts/

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_and_release:
    name: Build and Release Charts
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录，用于自动版本

#    - name: Inject slug/short variables
#      uses: rlespinasse/github-slug-action@v5

    - name: Install helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Download Existing Charts (for index merging)
      run: |
        mkdir -p _build && cd _build
        # 尝试下载现有索引，如果存在则用于合并
        curl -fL -o index.yaml.old "${{ env.HELM_REPO }}/index.yaml" || echo "No existing index found"
        if [ -f "index.yaml.old" ]; then
          # 下载现有Chart包
          helm repo add tmp_repo ${{ env.HELM_REPO }}
        fi
#        helm repo add self ${{ env.HELM_REPO }}
#        CHART_VERSIONS=$(helm search repo -l ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }} | awk '(NR>1) { print $2 }')
#        for CHART_VERSION in $CHART_VERSIONS; do helm pull self/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }} --version $CHART_VERSION; done

    - name: Package Charts
      run: |
        # 获取Chart版本（如果标签是chart版本格式）
        CHART_VERSION=""
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          CHART_VERSION="${GITHUB_REF#refs/tags/}"
          CHART_VERSION="${CHART_VERSION#v}"  # 移除'v'前缀
        fi

        # 打包所有Charts
        for chart_dir in charts/*/; do
          if [ -f "$chart_dir/Chart.yaml" ]; then
            # 如果启用了自动版本，动态设置版本
            if [ -n "$CHART_VERSION" ]; then
              yq eval ".version = \"$CHART_VERSION\"" -i "$chart_dir/Chart.yaml"
            fi
            helm package "$chart_dir" -d _build
          fi
        done

    - name: Generate or Update Index
      run: |
        cd _build
        # 如果有旧索引就合并，否则创建新索引
        if [ -f "index.yaml.old" ]; then
          helm repo index . --url "${{ env.HELM_REPO }}" --merge index.yaml.old
          rm index.yaml.old
        else
          helm repo index . --url "${{ env.HELM_REPO }}"
        fi
        
        # 验证索引
        echo "Generated index contents:"
        cat index.yaml

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_build

  # Deployment job
  deploy:
    name: Deploy Helm to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write # needed for ghcr access
      pages: write # needed for GitHub Pages access
      id-token: write # needed for keyless signing
    runs-on: ubuntu-latest
    needs: build_charts
    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_build
          destination_dir: helm-charts